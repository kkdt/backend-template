#!/bin/bash
#
# Reference: https://github.com/moby/moby/blob/master/contrib/mkimage-yum.sh
#
if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root"
  exit 1
fi

WORKINGDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

timenow=$(date +%s)

set -e

function usage() {
  echo "$(basename $0) [options] /path/to/imgenv"
  echo "  imgenv             The full path to the imgenv file"
  echo "  -y  <yum.conf>     The full path to the yum.conf - default to /etc/yum.conf"
  echo "  -t  <tag>          Tag name - default 'latest'"
  echo "  -s  <imgfile>      Full path to output file (i.e. docker save -o /tmp/g7dev.tar)"
  echo "  -h                 Print the help message"
  exit 1
}

yumconf=/etc/yum.conf
version=latest
save=false
saveoutput=""

while getopts ":y:s:t:h" opt; do
  case $opt in
  y)
    yumconf=$OPTARG
    if [ ! -f "${yumconf}" ]; then
      echo "Error: ${yumconf} does not exist"
      exit 22
    fi
    ;;
  h)
    usage
    ;;
  t)
    version="$OPTARG"
    ;;
  s)
    save="true"
    saveoutput=$OPTARG
    if [ -z "${saveoutput}" ]; then
      echo "Error: Must specified the full path to an output file"
      exit 33
    fi
    ;;
  *)
    echo "Invalid option: -$OPTARG"
    usage
    ;;
  esac
done
shift $((OPTIND - 1))

name=$1
if [ -z "${name}" -o ! -f "${name}" ]; then
  usage
fi

source "${name}"

if [ -z "${reponame}" ]; then
  echo "Repository name does not exist, please specify 'reponame' in ${name}"
  exit 11
fi

target=$(mktemp -d --tmpdir $(basename $0).XXXXXX)

set -x

doimport=false

if [ ! -z "${packages}" ]; then
  yum -c "${yumconf}" \
    --installroot="${target}" \
    --releasever=/ --setopt=tsflags=nodocs \
    --setopt=group_package_types=mandatory \
    -y install "${packages[@]}"
  doimport=true
else
  echo "No yum packages configured for ${reponame}"
fi

if [ ! -z "${rpms}" ]; then
  for file in "${rpms[@]}"
  do
    if [ -f ${file} ]; then
      echo "Installing RPM file ${file}"
      yum -c "${yumconf}" \
        --installroot="${target}" \
        --releasever=/ --setopt=tsflags=nodocs \
        --setopt=group_package_types=mandatory \
        -y localinstall "${file}"
      doimport=true
    else
      echo "Cannot find RPM file ${file}"
    fi
  done
else
  echo "No RPM file(s) configured for ${reponame}"
fi

if [ ! -z "${scripts}" ]; then
  for file in "${scripts[@]}"
  do
    if [ -f ${file} ]; then
      echo "Executing script file: ${file}"
      bash ${file} "${target}"
    else
      echo "Cannot find script file ${file}"
    fi
  done
else
  echo "No script file(s) configured for ${reponame}"
fi

cat > "$target"/etc/sysconfig/network <<EOF
NETWORKING=yes
HOSTNAME=localhost.localdomain
EOF

if [ "${doimport}" == "true" ]; then
  yum -c "${yumconf}" --installroot="${target}" -y clean all

  rm -rf "$target"/usr/{{lib,share}/locale,{lib,lib64}/gconv,bin/localedef,sbin/build-locale-archive}
  rm -rf "$target"/usr/share/{man,doc,info,gnome/help}
  rm -rf "$target"/usr/share/cracklib
  rm -rf "$target"/usr/share/i18n
  rm -rf "$target"/var/cache/yum
  mkdir -p --mode=0755 "$target"/var/cache/yum
  rm -rf "$target"/sbin/sln
  rm -rf "$target"/etc/ld.so.cache "$target"/var/cache/ldconfig
  mkdir -p --mode=0755 "$target"/var/cache/ldconfig

  currentversion=$(docker images -q ${name}:${version})
  if [ -z "${currentversion}" ]; then
    echo "Importing ${reponame}:${version}"
    tar --numeric-owner -c -C "${target}" . | docker import - ${reponame}:${version}
  else
    echo "Reimporting existing ${reponame}:${version}"
    docker rmi ${reponame}:${version}
    tar --numeric-owner -c -C "${target}" . | docker import - ${reponame}:${version}
  fi

  docker run -i -t --rm ${reponame}:${version} /bin/bash -c 'echo success'

  echo "Working directory for image ${reponame}:${version}: ${target}"

  if [ "${save}" == "true" ]; then
    echo "Saving docker ${reponame}:${version} to ${saveoutput}"
    docker save -o ${saveoutput} ${reponame}:${version}
  fi
else
  rm -rf ${target}
  echo "Nothing to do for ${reponame} @ ${name}"
  exit 11
fi
